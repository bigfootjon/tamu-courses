# Section 1, Problem 1:

def sum(array)
	sum = 0
	array.each {|x| sum += x }
	return sum
end

puts(sum([1,2,3,4]))
puts(sum([]))

# Section 1, Problem 2:

def max_2_sum(array)
	m1 = 0
	m2 = 0
	array.each {|x|
		if x > m1
			m1 = x
		elsif x > m2
			m2 = x
		end
	}
	return m1 + m2
end

puts(max_2_sum([]))
puts(max_2_sum([1]))
puts(max_2_sum([6,2,5,4,1]))

# Section 1, Problem 3:

def sum_to_n?(array, n)
	array.each {|x1|
		array.each {|x2|
			if x1 + x2 == n
				return true
			end
		}
	}
	return false
end

puts(sum_to_n?([], 15))
puts(sum_to_n?([1], 2))
puts(sum_to_n?([1], 4))
puts(sum_to_n?([1,3], 4))

# Section 2, Problem 1:

def hello(name)
	return "Hello, #{name}"
end

puts(hello("Jon"))
puts(hello("Dr. Walker"))

# Section 2, Problem 2:

def starts_with_consonant?(s)
	i = s.index(/a|e|i|o|u/)
	return i != 0
end

puts(starts_with_consonant?(""))
puts(starts_with_consonant?("test"))
puts(starts_with_consonant?("aloha"))

# Section 2, Problem 3:

def binary_multiple_of_4?(s)
	if s.length >= 2
		return (s[s.length-1] == "0" and s[s.length-2] == "0")
	else
		return s[0] == "0"
	end
end

puts(binary_multiple_of_4?("1"))
puts(binary_multiple_of_4?("10"))
puts(binary_multiple_of_4?("0"))
puts(binary_multiple_of_4?("00"))
puts(binary_multiple_of_4?("000"))
puts(binary_multiple_of_4?("100"))
puts(binary_multiple_of_4?("1000"))
puts(binary_multiple_of_4?("10100"))
puts(binary_multiple_of_4?("11111100"))

# Section 3, Problem 1:

class BookInStock
	def initialize(isbn, price)
		self.isbn = isbn
		self.price = price
	end
	
	def isbn()
		return @isbn
	end

	def isbn=(value)
		raise ArgumentError unless (value.kind_of?(String) and value.length > 0)
		@isbn = value
	end

	def price()
		return @price
	end

	def price=(value)
		raise ArgumentError unless (value.kind_of?(Float) and value > 0)
		@price = value
	end

	def price_as_string()
		return "$%.2f" % @price
	end
end

puts(BookInStock.new("1234-12354", 123.45678).price_as_string())

